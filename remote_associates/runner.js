// Generated by CoffeeScript 1.7.1
(function() {
  var _;

  _ = Psy._;

  this.RAT = {};

  this.RAT.experiment = {
    Define: {
      active_brain: true,
      resultObject: [],
      resultObject2: []
    },
    Routines: {
      Prelude1: {
        Events: {
          1: {
            Markdown: {
              url: "./design/RAT_instructions_page1.md"
            },
            Next: {
              AnyKey: {}
            }
          }
        }
      },
      Prelude2: {
        Events: {
          1: {
            Markdown: {
              url: "./design/RAT_instructions_page2.md"
            },
            Next: {
              AnyKey: {}
            }
          }
        }
      },
      Prelude3: {
        Events: {
          1: {
            Markdown: {
              url: "./design/RAT_instructions_page3.md"
            },
            Next: {
              AnyKey: {}
            }
          }
        }
      },
      Part1: {
        Start: {
          Text: {
            content: "Press any key when you are ready to begin.",
            position: "center",
            fontSize: 24,
            origin: "center"
          },
          Next: {
            AnyKey: {}
          }
        },
        End: {
          Text: {
            content: ["End of Part 1", "Press any key to continue."],
            position: "center",
            fontSize: 20,
            origin: "center"
          },
          Next: {
            AnyKey: {}
          }
        },
        PracticeEnd: {
          Text: {
            content: ["Solution: *Lawn* mower / *Lawn* gnome / *Lawn* fertilizer", "", "", "Remember to answer as quickly as possible. Press any key to continue"],
            position: "center",
            fontSize: 20,
            origin: "center"
          },
          Next: {
            AnyKey: {}
          }
        },
        Trial: function() {
          return {
            Group: {
              1: {
                Question: {
                  x: this.screen.center.x,
                  y: this.screen.center.y,
                  headerSize: "small",
                  origin: "center",
                  width: "66%",
                  question: this.trial.ProblemStim.toUpperCase(),
                  id: "question",
                  type: "multichoice",
                  choices: [this.trial.AnswerStim1, this.trial.AnswerStim2, this.trial.AnswerStim3],
                  react: {
                    change: (function(_this) {
                      return function(el) {
                        _this.context.set("choice", el);
                        return $("#nextbutton").removeClass("disabled");
                      };
                    })(this)
                  }
                }
              },
              2: {
                HtmlButton: {
                  id: "nextbutton",
                  origin: "center",
                  disabled: true,
                  label: "Next",
                  x: "18.5%",
                  y: "42%"
                }
              }
            },
            Next: {
              Receiver: {
                id: "nextbutton",
                signal: "clicked",
                timeout: 60000
              }
            },
            Feedback: function() {
              var correct, resp, resultObj;
              correct = this.context.get("choice") === this.trial.solution;
              resp = {
                questionID: 0,
                answer: this.context.get("choice"),
                correct: correct,
                condition: "Recognition",
                question: this.trial.ProblemStim.toUpperCase(),
                trialNumber: this.context.get("State.trialNumber"),
                blockNumber: this.context.get("State.blockNumber"),
                solution: this.trial.solution,
                Task: "Remote Associates"
              };
              resultObj = this.context.get("resultObject");
              resultObj.push(resp);
              console.log(resultObj);
              return {
                Events: {
                  1: {
                    Text: {
                      content: correct ? "Correct!" : "Incorrect.",
                      origin: "center",
                      position: "center"
                    },
                    Next: {
                      Timeout: {
                        duration: 700
                      }
                    }
                  }
                }
              };
            }
          };
        }
      },
      Part2: {
        Start: {
          Text: {
            content: ["Get ready for Part 2!", "", "Press any key to begin."],
            origin: "center",
            position: "center",
            fontSize: 24
          },
          Next: {
            AnyKey: {}
          }
        },
        End: {
          Text: {
            content: "End of Remote Associates Task. Press any key to continue",
            position: "center",
            origin: "center",
            fontSize: 20
          },
          Next: {
            AnyKey: {}
          }
        },
        PracticeEnd: {
          Text: {
            content: ["Solution: Fried *Chicken* / *Chicken* Dumpling / *Chicken* Out)", "", "", "Press any key to continue"],
            position: "center",
            fontSize: 20,
            origin: "center"
          },
          Next: {
            AnyKey: {}
          }
        },
        TrialPractice: function() {
          var context;
          context = this.context;
          return {
            Events: {
              1: {
                Question: {
                  x: "5%",
                  y: "33%",
                  width: "50%",
                  headerSize: "small",
                  question: this.trial.Stimulus.toUpperCase(),
                  id: "practice_question",
                  type: "textfield",
                  react: {
                    change: function(el) {
                      return context.set("practiceResponse", el);
                    }
                  }
                },
                Next: {
                  Receiver: {
                    id: "practice_question",
                    signal: "change",
                    timeout: 10000
                  }
                }
              }
            },
            Feedback: function() {
              console.log("practiceResponse", context.get("practiceResponse"));
              return console.log("response", this.response);
            }
          };
        },
        Trial: function() {
          var block, context, questions;
          questions = {};
          block = RAT.trialsPart2.getBlock(0);
          context = this.context;
          console.log("context is", this.context);
          console.log("block is", block);
          _.forEach(block, function(record, i) {
            console.log(record);
            return questions[(i + 1).toString()] = {
              Question: {
                x: "5%",
                width: "50%",
                headerSize: "small",
                question: record.Stimulus.toUpperCase(),
                id: "question_" + (i + 1),
                type: "textfield",
                focus: i === 0 ? true : false,
                react: {
                  change: function(el) {
                    var index, res, resultObj;
                    resultObj = context.get("resultObject2");
                    index = el.id.split("_")[1];
                    res = {
                      questionID: el.id,
                      answer: el.val,
                      condition: "Generate",
                      question: record.Stimulus.toUpperCase(),
                      trialNumber: index,
                      blockNumber: context.get("State.blockNumber"),
                      solution: record.solution,
                      Task: "Remote Associates"
                    };
                    resultObj[index] = res;
                    return console.log(resultObj);
                  }
                }
              }
            };
          });
          return {
            Group: questions,
            Next: {
              Timeout: {
                duration: 60000
              }
            },
            Feedback: function() {
              return console.log("feedback", this.response);
            }
          };
        }
      },
      Save: function() {
        return {
          Action: {
            execute: function(context) {
              var logdat, logdat1, logdat2;
              if (context.get("active_brain")) {
                logdat1 = context.get("resultObject");
                logdat2 = context.get("resultObject2");
                logdat = logdat1.concat(logdat2);
                console.log("saving ", logdat);
                return $.ajax({
                  type: "POST",
                  url: "/results",
                  data: JSON.stringify(logdat),
                  contentType: "application/json"
                });
              }
            }
          }
        };
      }
    },
    Flow: (function(_this) {
      return function(routines) {
        return {
          1: routines.Prelude1,
          2: {
            BlockSequence: {
              trialList: _this.RAT.trialsPractice,
              trial: routines.Part1.Trial,
              end: routines.Part1.PracticeEnd
            }
          },
          3: {
            BlockSequence: {
              start: routines.Part1.Start,
              trialList: _this.RAT.trialsPart1,
              trial: routines.Part1.Trial,
              end: routines.Part1.End
            }
          },
          4: routines.Prelude2,
          5: {
            BlockSequence: {
              trialList: _this.RAT.trialsPractice2,
              trial: routines.Part2.TrialPractice,
              end: routines.Part2.PracticeEnd
            }
          },
          6: routines.Prelude3,
          7: {
            BlockSequence: {
              start: routines.Part2.Start,
              trialList: _this.RAT.dummyTrials,
              trial: routines.Part2.Trial,
              end: routines.Part2.End
            }
          },
          8: routines.Save
        };
      };
    })(this)
  };

  this.RAT.start = (function(_this) {
    return function(sessionNumber, subjectNumber) {
      var design_gen, design_prac, design_prac2, design_recog, pres;
      if (sessionNumber > 4) {
        console.log("warning: sessionNumber > 4, resetting to 1");
        sessionNumber = 1;
      }
      design_recog = Psy.loadTable("design/RAT_RecList" + sessionNumber + ".txt", ",");
      design_gen = Psy.loadTable("design/RAT_GenList" + sessionNumber + ".txt", ",");
      design_prac = Psy.loadTable("design/RAT_PracList.txt", ",");
      design_prac2 = Psy.loadTable("design/RAT_PracList2.txt", ",");
      _this.RAT.trialsPractice = Psy.TrialList.fromBlock(design_prac);
      _this.RAT.trialsPractice2 = Psy.TrialList.fromBlock(design_prac2);
      _this.RAT.trialsPart1 = Psy.TrialList.fromBlock(design_recog);
      _this.RAT.trialsPart2 = Psy.TrialList.fromBlock(design_gen);
      _this.RAT.dummyTrials = new Psy.TrialList(1);
      _this.RAT.dummyTrials.add(0, {});
      _this.RAT.context = Psy.createContext();
      pres = new Psy.Presentation({}, _this.RAT.experiment, _this.RAT.context);
      return pres.start();
    };
  })(this);

}).call(this);
